import com.leapmotion.leap.*;
 
Controller leap = new Controller();
InteractionBox iBox;
 
void setup() {
  size(800, 600, P3D);
}
 
void draw() {
  background(0);
  Frame frame = leap.frame();
  HandList hands = frame.hands();
  iBox = frame.interactionBox();
  for(int i = 0; i < hands.count(); i++) {
    Hand hand = hands.get(i);
    drawPalm(hand);
    drawFingerTip(hand);
  }
}
 
void drawPalm(Hand hand) {
  Vector palmPos = hand.palmPosition();
  Vector palmPosNorm = iBox.normalizePoint(palmPos, false);
  pushMatrix();
    translate(palmPosNorm.getX() * width,( 1 - palmPosNorm.getY() ) * height, palmPosNorm.getZ() * 50);
    rotateX(-1 * hand.direction().pitch());
    rotateY(-1 * hand.direction().yaw());
    rotateZ(-1 * hand.palmNormal().roll());
    noStroke();
    fill(255);
    lights();
    box(80, 10, 100);
    stroke(255);
    line(0, 0, 0, 50);
  popMatrix();
}
void drawFingerTip(Hand hand) {
  FingerList fingers = hand.fingers();
  for(int i = 0; i < fingers.count(); i++) {
    boolean Scissors = false;
    Finger finger = fingers.get(i);
    Vector tipPos = finger.tipPosition();
    Vector tipPosNorm = iBox.normalizePoint(tipPos, false);
    if(finger.isExtended() == true) {
      if( ( i == 1 ) || ( i == 2 ) ){
        Finger finger0 = fingers.get(0); // 親指の情報取得
        Finger finger1 = fingers.get(1); // 人差し指の情報取得
        Finger finger2 = fingers.get(2); // 中指の情報取得
        Finger finger3 = fingers.get(3); // 薬指の情報取得
        Finger finger4 = fingers.get(4); // 小指の情報取得
        // 人差し指と中指を検知している場合
        if ( ( finger1.isExtended() == true ) && ( finger2.isExtended() == true ) ){
          // 他3本指が手のひらで隠れている場合
          if ( ( finger0.isExtended() == false ) && ( finger3.isExtended() == false ) && ( finger4.isExtended() == false ) ){
           Scissors = true; // ピースサインを検知 
          }
        }
        // ピースサインを検知したら青にする
        if ( Scissors == true ){ fill(0, 0, 255); }
        else {fill(255, 0, 0);}
      }
      else {
        fill(255, 0, 0);
      }
    } else {
      fill(255, 255, 255);
    }
    pushMatrix();
      translate(tipPosNorm.getX() * width, (1 - tipPosNorm.getY()) * height,tipPosNorm.getZ() * 50);
      noStroke();
      lights();
      sphere(20);
    popMatrix();
  }
}
